/* Copyright (c) 2009-2012 Xilinx, Inc.  All rights reserved.
 *
 * Xilinx, Inc.
 * XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION "AS IS" AS A
 * COURTESY TO YOU.  BY PROVIDING THIS DESIGN, CODE, OR INFORMATION AS
 * ONE POSSIBLE   IMPLEMENTATION OF THIS FEATURE, APPLICATION OR
 * STANDARD, XILINX IS MAKING NO REPRESENTATION THAT THIS IMPLEMENTATION
 * IS FREE FROM ANY CLAIMS OF INFRINGEMENT, AND YOU ARE RESPONSIBLE
 * FOR OBTAINING ANY RIGHTS YOU MAY REQUIRE FOR YOUR IMPLEMENTATION.
 * XILINX EXPRESSLY DISCLAIMS ANY WARRANTY WHATSOEVER WITH RESPECT TO
 * THE ADEQUACY OF THE IMPLEMENTATION, INCLUDING BUT NOT LIMITED TO
 * ANY WARRANTIES OR REPRESENTATIONS THAT THIS IMPLEMENTATION IS FREE
 * FROM CLAIMS OF INFRINGEMENT, IMPLIED WARRANTIES OF MERCHANTABILITY
 * AND FITNESS FOR A PARTICULAR PURPOSE.
 *
 */

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xaxivdma.h"
#include "xparameters.h"
#include "xtft.h"

/*
 * Device related constants. These need to defined as per the HW system.
 */
#define DMA_DEVICE_ID		XPAR_AXIVDMA_0_DEVICE_ID

#ifdef XPAR_INTC_0_DEVICE_ID
#define INTC_DEVICE_ID		XPAR_INTC_0_DEVICE_ID
#define WRITE_INTR_ID		XPAR_INTC_0_AXIVDMA_0_S2MM_INTROUT_VEC_ID
#define READ_INTR_ID		XPAR_INTC_0_AXIVDMA_0_MM2S_INTROUT_VEC_ID
#else
#define INTC_DEVICE_ID		XPAR_SCUGIC_SINGLE_DEVICE_ID
#define WRITE_INTR_ID		XPAR_FABRIC_AXIVDMA_0_S2MM_INTROUT_VEC_ID
#define READ_INTR_ID		XPAR_FABRIC_AXIVDMA_0_MM2S_INTROUT_VEC_ID
#endif

#ifdef XPAR_V6DDR_0_S_AXI_BASEADDR
#define DDR_BASE_ADDR		XPAR_V6DDR_0_S_AXI_BASEADDR
#define DDR_HIGH_ADDR		XPAR_V6DDR_0_S_AXI_HIGHADDR
#elif XPAR_S6DDR_0_S0_AXI_BASEADDR
#define DDR_BASE_ADDR		XPAR_S6DDR_0_S0_AXI_BASEADDR
#define DDR_HIGH_ADDR		XPAR_S6DDR_0_S0_AXI_HIGHADDR
#elif XPAR_AXI_7SDDR_0_S_AXI_BASEADDR
#define DDR_BASE_ADDR		XPAR_AXI_7SDDR_0_S_AXI_BASEADDR
#define DDR_HIGH_ADDR		XPAR_AXI_7SDDR_0_S_AXI_HIGHADDR
#elif XPAR_MIG7SERIES_0_BASEADDR
#define DDR_BASE_ADDR		XPAR_MIG7SERIES_0_BASEADDR
#define DDR_HIGH_ADDR	 	XPAR_MIG7SERIES_0_HIGHADDR
#else
#warning CHECK FOR THE VALID DDR ADDRESS IN XPARAMETERS.H, \
			DEFAULT SET TO 0x01000000
#define DDR_BASE_ADDR		0x01000000
#define DDR_HIGH_ADDR		0x0F000000
#endif

/* Memory space for the frame buffers
 *
 * This example only needs one set of frame buffers, because one video IP is
 * to write to the frame buffers, and the other video IP is to read from the
 * frame buffers.
 *
 * For 16 frames of 1080p, it needs 0x07E90000 memory for frame buffers
 */
#define MEM_BASE_ADDR		(DDR_BASE_ADDR + 0x01000000)
#define MEM_HIGH_ADDR		DDR_HIGH_ADDR
#define MEM_SPACE		(MEM_HIGH_ADDR - MEM_BASE_ADDR)

/* Read channel and write channel start from the same place
 *
 * One video IP write to the memory region, the other video IP read from it
 */
#define READ_ADDRESS_BASE	MEM_BASE_ADDR
#define WRITE_ADDRESS_BASE	MEM_BASE_ADDR

/* Frame size related constants
 */
#define FRAME_HORIZONTAL_LEN  1024*4  /* 1920 pixels, each pixel 4 bytes */
#define FRAME_VERTICAL_LEN    768   /* 1080 pixels */

/* Subframe to be transferred by Video DMA
 *
 *|<----------------- FRAME_HORIZONTAL_LEN ---------------------->|
 * --------------------------------------------------------------------
 *|                                                                | ^
 *|                                                                | |
 *|               |<-SUBFRAME_HORIZONTAL_SIZE ->|                  | FRAME_
 *|               -----------------------------------              | VERTICAL_
 *|               |/////////////////////////////|  ^               | LEN
 *|               |/////////////////////////////|  |               | |
 *|               |/////////////////////////////|  |               | |
 *|               |/////////////////////////////| SUBFRAME_        | |
 *|               |/////////////////////////////| VERTICAL_        | |
 *|               |/////////////////////////////| SIZE             | |
 *|               |/////////////////////////////|  |               | |
 *|               |/////////////////////////////|  v               | |
 *|                ----------------------------------              | |
 *|                                                                | v
 *--------------------------------------------------------------------
 *
 * Note that SUBFRAME_HORIZONTAL_SIZE and SUBFRAME_VERTICAL_SIZE must ensure
 * to be inside the frame.
 */
#define SUBFRAME_START_OFFSET    0
#define SUBFRAME_HORIZONTAL_SIZE 640*4
#define SUBFRAME_VERTICAL_SIZE   480

/* Number of frames to work on, this is to set the frame count threshold
 *
 * We multiply 15 to the num stores is to increase the intervals between
 * interrupts. If you are using fsync, then it is not necessary.
 */
#define NUMBER_OF_READ_FRAMES	3
#define NUMBER_OF_WRITE_FRAMES	3

/* Number of frames to transfer
 *
 * This is used to monitor the progress of the test, test purpose only
 */
#define NUM_TEST_FRAME_SETS	10

/* Delay timer counter
 *
 * WARNING: If you are using fsync, please increase the delay counter value
 * to be 255. Because with fsync, the inter-frame delay is long. If you do not
 * care about inactivity of the hardware, set this counter to be 0, which
 * disables delay interrupt.
 */
#define DELAY_TIMER_COUNTER	10

/*
 * Device instance definitions
 */
XAxiVdma AxiVdma;

/* Data address
 *
 * Read and write sub-frame use the same settings
 */
static u32 WriteFrameAddr;
static u32 BlockStartOffset;
static u32 BlockHoriz;
static u32 BlockVert;

/* DMA channel setup
 */
static XAxiVdma_DmaSetup ReadCfg;
static XAxiVdma_DmaSetup WriteCfg;

/* Transfer statics
 */
static int WriteDone;
static int WriteError;

//Adnan variable definitions
#define FGCOLOR_VALUE		0x0000FF00	/**< Foreground Color - Green */
#define BGCOLOR_VALUE		0x0		/**< Background Color - Black */
#define WHITECOLOR_VALUE 	0x00FFFFFF	/**< Color - White */
#define REDCOLOR_VALUE		0xFF0000
#define BLUECOLOR_VALUE		0x0000FF
#define YELLOWCOLOR_VALUE	0xFFFF00
#define CYANCOLOR_VALUE		0x00FFFF
#define PURPLECOLOR_VALUE	0x800080
#define ORANGECOLOR_VALUE	0xFFA500
#define OLIVECOLOR_VALUE	0x556B2F
#define AZURECOLOR_VALUE	0xF0FFFF
#define RYLBLUECOLOR_VALUE	0x4169E1
#define DGOLDRCOLOR_VALUE	0xB8860B
#define BROWNCOLOR_VALUE	0xA0522D
#define GRAYCOLOR_VALUE		0x696969
#define GRELCOLOR_VALUE		0xADFF2F

#define TFT_FRAME_ADDR MEM_BASE_ADDR

void print(char *str);

volatile unsigned int * memptr = (unsigned int*) XPAR_MIG_7SERIES_0_BASEADDR;

// Function prototypes
int TftExample(u32 TftDeviceId);
void drawBox(int x, int y, int length, int height, int color);
void drawLeftRightDescent(int x, int starty, int endy, int thickness, int color);
void drawLeftRightAscent(int x, int starty, int endy, int thickness, int color);

//Vars
static XTft TftInstance;


/******************* Function Prototypes ************************************/

static int WriteSetup(XAxiVdma * InstancePtr);
static int StartTransfer(XAxiVdma *InstancePtr);



void print(char *str);

int main(void)
{
	init_platform();

	int Status;
	XAxiVdma_Config *Config;

#if defined(XPAR_UARTNS550_0_BASEADDR)
	Uart550_Setup();
#endif

	WriteDone = 0;
	WriteError = 0;

	WriteFrameAddr = WRITE_ADDRESS_BASE;
	BlockStartOffset = SUBFRAME_START_OFFSET;
	BlockHoriz = SUBFRAME_HORIZONTAL_SIZE;
	BlockVert = SUBFRAME_VERTICAL_SIZE;

	xil_printf("\r\n--- Entering main() --- \r\n");

	/* The information of the XAxiVdma_Config comes from hardware build.
	 * The user IP should pass this information to the AXI DMA core.
	 */
	Config = XAxiVdma_LookupConfig(DMA_DEVICE_ID);
	if (!Config) {
		xil_printf(
		    "No video DMA found for ID %d\r\n", DMA_DEVICE_ID);

		return XST_FAILURE;
	}

	/* Initialize DMA engine */
	Status = XAxiVdma_CfgInitialize(&AxiVdma, Config, Config->BaseAddress);
	if (Status != XST_SUCCESS) {

		xil_printf(
		    "Configuration Initialization failed %d\r\n", Status);

		return XST_FAILURE;
	}

	/*
	 * Setup your video IP that writes to the memory
	 */


	/* Setup the write channel
	 */
	Status = WriteSetup(&AxiVdma);
	if (Status != XST_SUCCESS) {
		xil_printf(
		    	"Write channel setup failed %d\r\n", Status);
		if(Status == XST_VDMA_MISMATCH_ERROR)
			xil_printf("DMA Mismatch Error\r\n");

		return XST_FAILURE;
	}


	/* Enable your video IP interrupts if needed
	 */

	/* Start the DMA engine to transfer
	 */
	Status = StartTransfer(&AxiVdma);
	if (Status != XST_SUCCESS) {
		if(Status == XST_VDMA_MISMATCH_ERROR)
			xil_printf("DMA Mismatch Error\r\n");
		return XST_FAILURE;
	}

	/* Every set of frame buffer finish causes a completion interrupt
	 */

	xil_printf("--- Entering animation section --- \r\n");

	TftExample(XPAR_TFT_0_DEVICE_ID);

	xil_printf("--- Exiting main() --- \r\n");

	return XST_SUCCESS;
}

/*****************************************************************************/
/**
*
* This function sets up the write channel
*
* @param	InstancePtr is the instance pointer to the DMA engine.
*
* @return	XST_SUCCESS if the setup is successful, XST_FAILURE otherwise.
*
* @note		None.
*
******************************************************************************/
static int WriteSetup(XAxiVdma * InstancePtr)
{
	int Index;
	u32 Addr;
	int Status;

	WriteCfg.VertSizeInput = SUBFRAME_VERTICAL_SIZE;
	WriteCfg.HoriSizeInput = SUBFRAME_HORIZONTAL_SIZE;

	WriteCfg.Stride = FRAME_HORIZONTAL_LEN;
	WriteCfg.FrameDelay = 0;  /* This example does not test frame delay */

	WriteCfg.EnableCircularBuf = 1;
	WriteCfg.EnableSync = 0;  /* No Gen-Lock */

	WriteCfg.PointNum = 0;    /* No Gen-Lock */
	WriteCfg.EnableFrameCounter = 0; /* Endless transfers */

	WriteCfg.FixedFrameStoreAddr = 0; /* We are not doing parking */

	Status = XAxiVdma_DmaConfig(InstancePtr, XAXIVDMA_WRITE, &WriteCfg);
	if (Status != XST_SUCCESS) {
		xil_printf(
		    "Write channel config failed %d\r\n", Status);

		return XST_FAILURE;
	}

	/* Initialize buffer addresses
	 *
	 * Use physical addresses
	 */
	Addr = WRITE_ADDRESS_BASE + BlockStartOffset;
	for(Index = 0; Index < NUMBER_OF_WRITE_FRAMES; Index++) {
		WriteCfg.FrameStoreStartAddr[Index] = Addr;

		Addr += FRAME_HORIZONTAL_LEN * FRAME_VERTICAL_LEN;
	}

	/* Set the buffer addresses for transfer in the DMA engine
	 */
	Status = XAxiVdma_DmaSetBufferAddr(InstancePtr, XAXIVDMA_WRITE,
	        WriteCfg.FrameStoreStartAddr);
	if (Status != XST_SUCCESS) {
		xil_printf(
		    "Write channel set buffer address failed %d\r\n", Status);

		return XST_FAILURE;
	}

	/* Clear data buffer
	 */
	memset((void *)WriteFrameAddr, 0,
	    FRAME_HORIZONTAL_LEN * FRAME_VERTICAL_LEN * NUMBER_OF_WRITE_FRAMES);

	return XST_SUCCESS;
}

/*****************************************************************************/
/**
*
* This function starts the DMA transfers. Since the DMA engine is operating
* in circular buffer mode, video frames will be transferred continuously.
*
* @param	InstancePtr points to the DMA engine instance
*
* @return	XST_SUCCESS if both read and write start succesfully
*		XST_FAILURE if one or both directions cannot be started
*
* @note		None.
*
******************************************************************************/
static int StartTransfer(XAxiVdma *InstancePtr)
{
	int Status;

	Status = XAxiVdma_DmaStart(InstancePtr, XAXIVDMA_WRITE);
	if (Status != XST_SUCCESS) {
		xil_printf(
		    "Start Write transfer failed %d\r\n", Status);

		return XST_FAILURE;
	}

	return XST_SUCCESS;
}

//Adnan's animation functions + main
int TftExample(u32 TftDeviceId)
{
	int Status;
	u8 VarChar;
	XTft_Config *TftConfigPtr;

	/*
	 * Get address of the XTft_Config structure for the given device id.
	 */
	TftConfigPtr = XTft_LookupConfig(TftDeviceId);
	if (TftConfigPtr == (XTft_Config *)NULL) {
		return XST_FAILURE;
	}

	/*
	 * Initialize all the TftInstance members and fills the screen with
	 * default background color.
	 */
	Status = XTft_CfgInitialize(&TftInstance, TftConfigPtr,
				 	TftConfigPtr->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Wait till Vsync(Video address latch) status bit is set before writing
	 * the frame address into the Address Register. This ensures that the
	 * current frame has been displayed and we can display a new frame of
	 * data. Checking the Vsync state ensures that there is no data flicker
	 * when displaying frames in real time though there is some delay due to
	 * polling.
	 */
	while (XTft_GetVsyncStatus(&TftInstance) !=
					XTFT_IESR_VADDRLATCH_STATUS_MASK);

	/*
	 * Change the Video Memory Base Address from default value to
	 * a valid Memory Address and clear the screen.
	 */
	XTft_SetFrameBaseAddr(&TftInstance, TFT_FRAME_ADDR);
	XTft_ClearScreen(&TftInstance);

	int i;
	for (i = 0; i < 240; i++) {
		XTft_SetPixel(&TftInstance, i, i, XTFT_DEF_FGCOLOR);
		XTft_SetPixel(&TftInstance, i+1, i, XTFT_DEF_FGCOLOR);
		XTft_SetPixel(&TftInstance, i+2, i, XTFT_DEF_FGCOLOR);
		XTft_SetPixel(&TftInstance, i+3, i, XTFT_DEF_FGCOLOR);
		XTft_SetPixel(&TftInstance, i+4, i, XTFT_DEF_FGCOLOR);
		XTft_SetPixel(&TftInstance, i+5, i, XTFT_DEF_FGCOLOR);
	}

	/*
	 * Initialize the variable VarChar to the value to be displayed on the
	 * screen.
	 * Set the foreground and background colors.
	 */
	VarChar = 'S';
	XTft_SetColor(&TftInstance, FGCOLOR_VALUE, BGCOLOR_VALUE);

	/*
	 * Write the character two times starting from top left corner
	 * (i.e. origin) of screen.
	 */
	XTft_Write(&TftInstance, VarChar);
	XTft_Write(&TftInstance, VarChar);

	//Character Drawing
	int player1 = XTFT_DISPLAY_WIDTH/2 - 50;
	int player2 = XTFT_DISPLAY_WIDTH/2 + 100;

/*********************************Player 1*******************************************/
	/*drawBox(player1, 300, 15, 15, BROWNCOLOR_VALUE);//Head
	drawBox(player1 - 15, 316, 45, 60, GRELCOLOR_VALUE);//Torso

	//drawBox(player1 - 10, 377, 10, 60, GRAYCOLOR_VALUE);//Left Leg
	//drawBox(player1 + 15, 377, 10, 60, GRAYCOLOR_VALUE);//Right Leg
	drawLeftRightDescent(player1 - 10, 377, 403, 15, BROWNCOLOR_VALUE);//Thigh
	//drawLeftRightAscent(player1 + 18, 355, 314, 10, BROWNCOLOR_VALUE);//Calf
	drawBox(player1 - 10, 438, 20, 10, YELLOWCOLOR_VALUE);//Left Foot
	drawBox(player1 + 15, 438, 20, 10, YELLOWCOLOR_VALUE);//Right Foot

	//drawBox(player1, 392, 40, 10, BROWNCOLOR_VALUE);//Arm
	//drawBox(player1 + 32, 300, 13, 14, REDCOLOR_VALUE);//Fist
	drawLeftRightDescent(player1 - 5, 320, 355, 15, BROWNCOLOR_VALUE);//Upper Arm
	drawLeftRightAscent(player1 + 18, 355, 314, 10, BROWNCOLOR_VALUE);//Forearm
	drawLeftRightAscent(player1 + 35, 315, 305, 15, REDCOLOR_VALUE);//Fist
/*********************************Player 1*******************************************/

/*********************************Player 2*******************************************/
/*	drawBox(player2, 300, 15, 15, ORANGECOLOR_VALUE);//Head
	drawBox(player2 - 15, 316, 45, 60, OLIVECOLOR_VALUE);//Torso

	drawBox(player2 - 10, 377, 10, 60, RYLBLUECOLOR_VALUE);//Right Leg
	drawBox(player2 + 15, 377, 10, 60, RYLBLUECOLOR_VALUE);//Left Leg
	drawBox(player2 - 20, 438, 20, 10, AZURECOLOR_VALUE);//Right Foot
	drawBox(player2 + 5, 438, 20, 10, AZURECOLOR_VALUE);//Left Foot

	//drawBox(player2 - 45, 320, 60, 10, ORANGECOLOR_VALUE);//Arm
	//drawBox(player2 - 59, 318, 13, 14, BLUECOLOR_VALUE);//Fist
	drawLeftRightAscent(player2 - 12, 355, 320, 15, ORANGECOLOR_VALUE);//Upper Arm
	drawLeftRightDescent(player2 - 33, 314, 355, 10, ORANGECOLOR_VALUE);//Forearm
	drawLeftRightDescent(player2 - 40, 305, 315, 15, BLUECOLOR_VALUE);//Fist
/*********************************Player 2*******************************************/

	//Character Drawing

	//animation test
	int xpos;
	int ypos;
	int reverse_toggle;

	//initial
	xpos = 0;
	ypos = 240;
	reverse_toggle = 0;

	while(1) {
		if (reverse_toggle == 0) {
			XTft_SetPixel(&TftInstance, xpos, ypos, FGCOLOR_VALUE);

			int waste_time = 0;

			while (waste_time < 200000) {
				waste_time++;
			}

			XTft_SetPixel(&TftInstance, xpos, ypos, BGCOLOR_VALUE);

			xpos = xpos + 1;
			if (xpos == (XTFT_DISPLAY_WIDTH - 1))
				reverse_toggle = 1;
		}

		if (reverse_toggle == 1) {
			XTft_SetPixel(&TftInstance, xpos, ypos, FGCOLOR_VALUE);

			int waste_time = 0;
			while (waste_time < 200000) {
				waste_time++;
			}

			XTft_SetPixel(&TftInstance, xpos, ypos, BGCOLOR_VALUE);

			xpos = xpos - 1;
			if (xpos == 0)
				reverse_toggle = 0;
		}

		//Player 1 Fight Stance
		drawBox(player1, 320, 60, 10, BGCOLOR_VALUE);//Arm
		drawBox(player1 + 60, 318, 13, 14, BGCOLOR_VALUE);//Fist
		drawBox(player1, 300, 15, 15, BROWNCOLOR_VALUE);//Head
		drawBox(player1 - 15, 316, 45, 60, GRELCOLOR_VALUE);//Torso
		drawBox(player1 - 10, 377, 10, 60, GRAYCOLOR_VALUE);//Left Leg
		drawBox(player1 + 15, 377, 10, 60, GRAYCOLOR_VALUE);//Right Leg
		drawBox(player1 - 10, 438, 20, 10, YELLOWCOLOR_VALUE);//Left Foot
		drawBox(player1 + 15, 438, 20, 10, YELLOWCOLOR_VALUE);//Right Foot
		drawLeftRightDescent(player1 - 5, 320, 355, 15, BROWNCOLOR_VALUE);//Upper Arm
		drawLeftRightAscent(player1 + 18, 355, 314, 10, BROWNCOLOR_VALUE);//Forearm
		drawLeftRightAscent(player1 + 35, 315, 305, 15, REDCOLOR_VALUE);//Fist

		//Player 2 Punches
		drawLeftRightAscent(player2 - 12, 355, 320, 15, BGCOLOR_VALUE);//Upper Arm
		drawLeftRightDescent(player2 - 33, 314, 355, 10, BGCOLOR_VALUE);//Forearm
		drawLeftRightDescent(player2 - 40, 305, 315, 15, BGCOLOR_VALUE);//Fist
		drawBox(player2, 300, 15, 15, ORANGECOLOR_VALUE);//Head
		drawBox(player2 - 15, 316, 45, 60, OLIVECOLOR_VALUE);//Torso
		drawBox(player2 - 10, 377, 10, 60, RYLBLUECOLOR_VALUE);//Right Leg
		drawBox(player2 + 15, 377, 10, 60, RYLBLUECOLOR_VALUE);//Left Leg
		drawBox(player2 - 20, 438, 20, 10, AZURECOLOR_VALUE);//Right Foot
		drawBox(player2 + 5, 438, 20, 10, AZURECOLOR_VALUE);//Left Foot
		drawBox(player2 - 45, 320, 60, 10, ORANGECOLOR_VALUE);//Arm
		drawBox(player2 - 59, 318, 13, 14, BLUECOLOR_VALUE);//Fist

		int waste_time = 0;
		while (waste_time < ANIMATION_SPEED) {
			waste_time++;
		}

		//Player 1 Punches
		drawLeftRightDescent(player1 - 5, 320, 355, 15, BGCOLOR_VALUE);//Upper Arm
		drawLeftRightAscent(player1 + 18, 355, 314, 10, BGCOLOR_VALUE);//Forearm
		drawLeftRightAscent(player1 + 35, 315, 305, 15, BGCOLOR_VALUE);//Fist
		drawBox(player1 - 15, 316, 45, 60, GRELCOLOR_VALUE);//Torso
		drawBox(player1, 320, 60, 10, BROWNCOLOR_VALUE);//Arm
		drawBox(player1 + 60, 318, 13, 14, REDCOLOR_VALUE);//Fist

		//Player 2 Fight Stance
		drawBox(player2 - 45, 320, 60, 10, BGCOLOR_VALUE);//Arm
		drawBox(player2 - 59, 318, 13, 14, BGCOLOR_VALUE);//Fist
		drawBox(player2, 300, 15, 15, ORANGECOLOR_VALUE);//Head
		drawBox(player2 - 15, 316, 45, 60, OLIVECOLOR_VALUE);//Torso
		drawBox(player2 - 10, 377, 10, 60, RYLBLUECOLOR_VALUE);//Right Leg
		drawBox(player2 + 15, 377, 10, 60, RYLBLUECOLOR_VALUE);//Left Leg
		drawBox(player2 - 20, 438, 20, 10, AZURECOLOR_VALUE);//Right Foot
		drawBox(player2 + 5, 438, 20, 10, AZURECOLOR_VALUE);//Left Foot
		drawLeftRightAscent(player2 - 12, 355, 320, 15, ORANGECOLOR_VALUE);//Upper Arm
		drawLeftRightDescent(player2 - 33, 314, 355, 10, ORANGECOLOR_VALUE);//Forearm
		drawLeftRightDescent(player2 - 40, 305, 315, 15, BLUECOLOR_VALUE);//Fist

		waste_time = 0;
		while (waste_time < ANIMATION_SPEED) {
			waste_time++;
		}
	}
	return XST_SUCCESS;
}

void drawBox(int x, int y, int length, int height, int color){
	int i, j;
	for(i = x; i <= x + length; i++){
		for(j = y; j <= y + height; j++)
			XTft_SetPixel(&TftInstance, i, j, color);
	}
}

void drawLeftRightDescent(int x, int starty, int endy, int thickness, int color){
	int i, count;
	for (i = x; starty < endy; starty=starty+2, i++){
		count = 1;
		for (; count < thickness; count++) {
			XTft_SetPixel(&TftInstance, i + count, starty, color);
			XTft_SetPixel(&TftInstance, i + count, starty+1, color);
		}
	}
}

void drawLeftRightAscent(int x, int starty, int endy, int thickness, int color){
	int i, count;
	for (i = x; starty > endy; starty=starty-2, i++){
		count = 1;
		for (; count < thickness; count++) {
			XTft_SetPixel(&TftInstance, i + count, starty, color);
			XTft_SetPixel(&TftInstance, i + count, starty - 1, color);
		}
	}
}


